// Code generated by go-bindata.
// sources:
// template/method.tmpl
// template/struct.tmpl
// mapconfig/typemap.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x4d\x53\x1a\x41\x10\x3d\xb3\xbf\xa2\xa5\x52\xc9\x12\xa9\xb5\x72\xc8\x21\x56\x71\xb0\x64\x4c\xa8\x90\x45\x61\x49\xbc\xe9\xc0\x36\xb2\x95\x65\x06\x67\x06\x94\xb2\xf8\xef\x99\xd9\x59\x96\xaf\x05\x91\xa0\xb9\xc4\x83\x94\x43\x7f\xbc\x9e\xe9\xf7\xba\x3d\x39\x01\xf2\x18\x49\x25\x21\x44\x85\x62\x10\x31\x94\x10\xf5\x40\xf5\x11\x9e\x9e\xc0\xf3\xe9\x00\x61\x3a\x05\xb4\x46\x11\x4b\xbe\x09\xa9\xa2\x1d\x2a\xd1\x73\x7a\x23\xd6\x05\x57\x5b\xca\x3e\x17\x8a\x19\xeb\xcc\xe7\xe3\x42\x80\x52\x9a\xc6\x2d\x41\x87\xf3\x18\x9e\x9c\x82\x40\x35\x12\x0c\x72\x7d\xbd\x1b\x9b\xd0\x99\x3a\x8e\x86\x58\xc5\x58\xa3\x0b\x61\x28\xf8\x38\x0a\x0d\x42\xd6\xe3\x62\x40\x55\xc4\x59\x1e\xda\x3e\x95\xd0\x41\x64\xba\x28\xeb\xd8\x13\x7c\xb0\x37\xf2\x34\xfb\xce\xd0\xd3\xa4\x29\xf6\x1a\x93\x28\x94\x46\x6c\x3e\xe4\x1a\x54\xc5\xf7\xc6\x65\x23\xbb\x61\x07\xae\x46\x28\x26\x28\x4a\x80\x42\x70\x61\x10\x8e\xa9\x30\x7f\xd8\x03\xc7\x29\x68\x20\xfa\x9e\x68\x2c\x90\x86\x13\xfb\x9a\x65\xe8\xd0\x28\x76\x0a\xfa\x7c\xeb\x1b\x98\x70\xb3\x8a\x93\x70\xd2\xf3\xf1\xc1\x2d\xda\x8a\xa0\xa7\x83\x60\x78\xba\x1c\x5b\x16\x4b\x4e\x61\x6a\xf3\xca\xfb\x18\xee\x0d\x40\x07\xf4\x4f\x97\x33\xa9\xcc\x99\x54\x02\x2a\x70\x5b\xf3\x5b\xa4\x19\x40\xcd\x0f\x1a\xc9\xbd\x04\xb4\x13\xa3\xd7\xea\xf6\x71\x40\x0d\x88\xf9\xd9\xec\x12\xdc\x5b\x38\xd6\x88\x6e\xf5\x37\x5d\x1e\x1b\xc8\x12\xbc\x8b\x08\xe3\x50\xce\x4c\x2f\x45\x34\xa0\x62\xf2\x1d\x27\xda\x21\x35\x2f\xc1\xcf\xb3\x7a\x9b\xb4\x56\xfc\xc7\x34\xde\xd1\xbd\x49\x82\x76\xd3\xaf\xf9\x5f\x61\x9e\x39\xdf\xc3\xd6\x2d\x46\x2c\xad\xbb\x70\xdd\xa8\xf3\x3b\xd7\x16\x5d\x36\xee\x3d\x93\x6f\x19\xba\xbb\xf2\x02\xa5\xdc\xd8\xfa\x5a\xcd\xb3\x56\x20\xec\x78\xc9\xab\x37\xf9\xc3\x61\x02\xeb\x3b\xa7\xcc\x7d\x9f\xdf\x0a\xf3\x57\x58\x45\xa3\xbb\xc7\x00\x3a\xaa\x00\x8b\xe2\x95\x56\x99\xb7\x00\x2a\xdb\x17\xc8\xba\xe8\x14\xb6\xb7\x5b\x05\x94\x18\xa1\x93\xb1\x4c\xc7\x4d\xa9\xd4\x1e\x6a\x9a\x20\x8c\x92\x8f\x75\x2a\xfd\x85\x38\xd9\xc8\x2f\xa1\x52\xc8\x51\xb2\x0f\x6a\x8d\x4a\x47\x7b\x71\xc9\x96\x94\x71\xc9\x04\x07\xc6\xd3\xe8\x0b\x5c\x32\x89\xad\xba\x3c\xcf\xde\x99\xf6\xed\x96\x52\x3f\xea\x6f\x23\x94\xba\xe6\xc4\x51\x2b\xeb\xce\x1c\x6e\x5f\x56\xcf\x02\x92\xd1\x77\x2b\x7b\x5b\x24\xd8\x9f\xc1\x15\x70\x61\x4f\xf6\xfe\xfa\x46\x9a\xe4\x39\xe6\xea\x04\xef\xac\x49\x97\x8f\x98\xda\x1e\xf9\x15\x59\x5e\xde\xf0\xa6\x9b\x69\x78\x53\x86\x4c\x17\xc8\x23\x76\xff\x11\x8c\x05\xee\x5b\xca\xb6\xe8\x18\x41\xea\x5f\x07\x9d\x7c\x26\x6a\x3e\x59\x37\xd2\x21\x5b\x3f\x16\xe8\x90\x6f\x99\x69\x41\xda\xfe\x5b\x8d\xb3\x19\x5c\xca\x34\x2a\x99\x8a\x43\x14\x66\x43\x91\x40\x99\xd6\x2b\x3b\x28\x0d\xc2\x79\x15\x9e\xb6\x36\x0e\x7e\x23\x20\xa7\x70\xc9\xa5\xba\x13\xd8\xba\xaa\xc3\x17\xef\xf3\x31\x70\x16\x4f\x5e\xa4\x5f\xff\x57\x81\x15\x21\x79\xd1\xe0\x5f\x30\x6e\xf8\x70\xde\xf0\x2f\xea\xb5\xf3\x20\xb9\xfb\x6d\x7a\xa1\x77\xc3\x06\xa4\xea\xf7\x9c\xb0\x2d\xcb\xd8\x92\xe1\x50\x60\x2f\x7a\x5c\x36\x2f\x92\xeb\xf3\x7a\xbb\x4a\xaa\xc5\x05\xcf\x43\x69\xce\x61\x24\xe3\xcd\xe7\xbf\x5d\xc4\xd3\x09\xb8\x2e\x28\x07\x58\xf2\xdf\x76\x03\x30\x95\x1d\x68\xb2\x2f\x86\xda\xce\xb2\x2a\xa9\x13\xdd\xae\x17\xcd\xc6\x8f\x1d\x59\xb6\xf3\xe8\xfc\xb4\x43\x7f\x1e\x6c\xaa\xbd\xce\x96\x3a\xfb\xdf\x6d\x53\x8f\xce\xae\x3e\xbf\x49\xff\x04\x00\x00\xff\xff\xa0\x2f\x55\x23\x4e\x0f\x00\x00")

func templateMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMethodTmpl,
		"template/method.tmpl",
	)
}

func templateMethodTmpl() (*asset, error) {
	bytes, err := templateMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/method.tmpl", size: 3918, mode: os.FileMode(420), modTime: time.Unix(1469621320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x57\xa8\xae\x56\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\x55\x28\x4a\x2d\x28\x4a\x2d\x4e\xcd\x2b\x29\x06\x0b\x87\x24\x26\xe5\xa4\xea\x05\x27\x67\xa4\xe6\x26\x02\xa5\xf5\x10\x62\x50\x0d\x5c\x25\x95\x05\xa9\x28\x26\x14\x97\x14\x95\x26\x97\x28\x54\x73\x55\x57\xeb\x2a\x14\x25\xe6\xa5\xa7\x2a\xe8\xb9\x65\xa6\xe6\xa4\x14\x83\x94\x73\x22\x2b\x05\x9b\x06\xd2\x0f\x64\x43\xdd\xe1\x9c\x9f\x53\x9a\x9b\x07\x37\x1d\x64\x46\x6a\x5e\x0a\x88\x59\xcb\x05\x08\x00\x00\xff\xff\x93\x7f\xab\xa4\xab\x00\x00\x00")

func templateStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateStructTmpl,
		"template/struct.tmpl",
	)
}

func templateStructTmpl() (*asset, error) {
	bytes, err := templateStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/struct.tmpl", size: 171, mode: os.FileMode(420), modTime: time.Unix(1468656862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapconfigTypemapToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x95\xcf\x8e\xd3\x30\x10\xc6\xef\x79\x8a\x28\xc7\x15\xaa\x96\x3f\xda\x1b\x37\x84\xc4\x85\x0b\xdc\x42\x55\x4d\xd2\x49\xd7\xc8\xb1\x8b\x3d\x2e\x04\xc4\xbb\x63\xbb\x49\xb7\x71\xc7\x5b\x15\x69\xd3\x4a\x6d\xfa\xcd\x7c\xce\xaf\x33\xce\xb8\xb6\x64\x84\xda\xad\x8b\x6d\xb3\xa1\x61\x8f\xb6\x7c\x5f\xd6\x55\xfb\x08\x06\x5a\x42\x53\xbd\x2a\x9f\x7e\x94\x07\x30\x83\x4f\x0e\x22\xe1\x2f\x0a\xdf\xbd\x56\x38\x54\xeb\x42\x69\x52\x4e\xca\xcd\x4e\xc7\x65\xfc\x2a\xd5\x71\xe5\xea\x14\x52\x42\x6e\x0e\x20\x1d\xfa\xd8\x37\xff\xf6\x11\x2f\x43\x23\x71\xe6\xfa\x21\x57\x9f\xbd\xfe\x65\x72\x4f\x39\x97\xf6\xa2\x26\xd1\xe3\x1c\xbd\x28\xfd\xab\x0a\x7a\xf9\x53\xd0\x63\x19\xaf\x7e\x7b\xc8\x08\x3d\xc9\xda\xd1\x79\xe4\xc9\x64\x09\xfa\x3d\x97\x92\x86\xe7\xb1\x2d\x10\x56\x05\x5b\x85\x90\xb7\xfa\xea\x3f\xf8\x42\xdc\xf3\x55\xb8\x3b\xb7\x71\x15\xb8\x0f\x7f\xbf\xd1\x5a\x26\x9d\x0b\x12\x82\xe2\x3b\x12\x82\x3c\x46\x07\xd2\x22\x8f\x32\x9a\x38\x88\xd1\x55\xd4\xb6\x07\x29\x85\xa2\x04\x66\x92\x79\x1a\x1f\x78\xfd\x70\x53\x55\xa6\xbd\xf1\x49\xd1\xc3\xbb\x0c\xd3\x2c\xe7\xcf\xdf\x40\xe7\x6f\x84\x3b\x34\x09\xdc\xa8\x66\xd9\x96\x20\x6b\xc4\xee\xb2\x6a\x47\x31\xcb\x15\xd7\x7f\x71\xb2\xd8\x3a\x8b\x46\x40\xba\xc3\xce\x22\x3c\xa3\x5b\xac\xb1\x3c\xdf\x15\xb4\xb7\x6f\x96\x40\x33\x78\x01\x16\x24\x1e\xab\x93\x1a\xf2\x5c\xab\x2b\x64\x1f\x83\xfb\x2a\xdb\x98\x75\xa4\x53\xae\xf7\x55\x6a\x13\xc0\x51\x8d\x03\x4d\x3b\xbf\x50\xb9\x37\xd8\x0a\x2b\x74\x66\x9e\x74\xa7\x3b\x2f\xc4\xdd\x0c\x84\x90\x3e\x2e\x41\xcb\xcc\xbb\x81\x32\x63\x37\x7f\xfe\x8c\x9e\xe7\x4e\x9d\xef\x56\xab\x04\x22\x48\x3c\x43\xbd\xfe\x1f\x8a\x93\xeb\x39\x8e\x30\xc1\xcc\xe1\x62\x9f\x4d\x32\xcf\x13\x0f\x96\x0f\xce\x00\x85\xb6\xde\x7e\x26\x9d\x59\xb3\xe7\xd2\x16\x3b\x70\x32\x9d\x6b\x77\xd9\x91\x86\xa6\x83\x16\x43\x8b\x39\x1c\x7f\xcd\x03\xcd\x9d\x1c\x4d\xb4\xfe\x0b\x00\x00\xff\xff\x9a\xb8\xec\x85\xe3\x08\x00\x00")

func mapconfigTypemapTomlBytes() ([]byte, error) {
	return bindataRead(
		_mapconfigTypemapToml,
		"mapconfig/typemap.toml",
	)
}

func mapconfigTypemapToml() (*asset, error) {
	bytes, err := mapconfigTypemapTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mapconfig/typemap.toml", size: 2275, mode: os.FileMode(420), modTime: time.Unix(1468816593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/method.tmpl": templateMethodTmpl,
	"template/struct.tmpl": templateStructTmpl,
	"mapconfig/typemap.toml": mapconfigTypemapToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mapconfig": &bintree{nil, map[string]*bintree{
		"typemap.toml": &bintree{mapconfigTypemapToml, map[string]*bintree{}},
	}},
	"template": &bintree{nil, map[string]*bintree{
		"method.tmpl": &bintree{templateMethodTmpl, map[string]*bintree{}},
		"struct.tmpl": &bintree{templateStructTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

