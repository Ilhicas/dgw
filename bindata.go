// Code generated by go-bindata.
// sources:
// template/method.tmpl
// template/struct.tmpl
// mapconfig/typemap.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x4f\x73\xda\x3e\x10\x3d\xe3\x4f\xb1\x61\x7e\xf3\xab\x69\xa8\x33\x3d\xf4\xd0\xcc\x70\xc8\x80\xd3\x32\xa5\x26\x01\xd3\xe6\x96\x08\xbc\x04\x4f\x8d\x44\x24\x41\xc2\x30\x7c\xf7\x4a\x96\x71\x4c\x30\xc4\xa1\x24\xbd\xf4\x82\x27\xce\xfe\x79\xab\xdd\xf7\x56\x5e\x2c\x20\x1c\x82\x73\xc1\xc3\x31\xe1\xf3\x6f\x38\x87\xe5\xd2\x3a\x39\x01\xf7\x21\x14\x52\x40\x80\x12\xf9\x38\xa4\x28\xb4\x99\x1c\x21\x28\x07\xc7\x23\x63\x54\x76\x80\xc6\x28\xa4\xf1\x7f\x02\x22\x49\x9f\x08\x74\xac\xe1\x94\x0e\xc0\x56\x96\x62\xc4\xb8\xa4\xda\x3a\xf5\x79\x9f\x09\x50\x49\xd2\xd8\x15\xe8\x33\x16\xc1\xc2\x2a\x71\x94\x53\x4e\x21\xd7\xd7\xb9\x36\x09\xad\xa5\xa5\x21\x36\x30\x52\xe8\x02\x98\x70\x36\x0b\x03\x8d\x90\x0e\x19\x1f\x13\x19\x32\x9a\x87\x76\x44\x04\xf4\x11\xa9\x2a\xca\x38\x0e\x39\x1b\xef\x8d\x3c\xc9\x5e\x18\x7a\x92\x34\xc1\xde\xa4\x02\xb9\x54\x88\xf5\x43\x6c\x40\x95\x6c\x6f\x5c\x26\xb2\x1d\xf4\xe1\x72\x8a\x7c\x8e\xbc\x02\xc8\x39\xe3\x1a\xe1\x8c\x70\xfd\x87\x79\x61\x59\x25\x05\x44\x9d\x13\x89\x38\x92\x60\x6e\xba\x59\x85\x3e\x09\x23\xab\xa4\xde\xef\xec\x81\x0e\xb7\xaa\x38\x0e\x27\x1c\x0f\xef\xed\xb2\xa9\x08\x86\x2a\x08\x06\xa7\xeb\xb1\x45\xb9\x62\x95\x96\x26\xaf\xb8\x8b\xe0\x4e\x03\xb4\x4a\x03\x46\x85\xd4\x2f\x84\xe4\x50\x83\x9b\xa6\xd7\x75\x3b\x3e\x34\x3d\xbf\x1d\x63\x18\x8c\x70\x4c\xc0\xe9\x26\x4f\x9f\xf4\x23\x34\xbf\xab\x13\xb0\x6f\xe0\x58\xc1\xb9\x51\xd6\x03\x16\x69\xbc\x02\x9c\xf3\x10\xa3\x40\x64\x47\x7b\x55\x43\x62\x5d\x81\x1f\x67\xad\x9e\xdb\x7d\xe2\x3e\x23\x51\x31\xef\x8e\xeb\xf7\x3a\x5e\xd3\xfb\x02\x8f\x79\xd7\x1c\xea\x6a\x2e\x94\xbd\x29\x98\x4f\xe9\xaa\xe0\xab\x76\x8b\xdd\xda\xa6\xe0\xaa\x76\x1e\xea\x64\xeb\xb0\xed\x27\x47\x5f\xc9\x83\xa2\x8e\x53\xb7\xb3\x06\x41\xdf\x89\xbb\xdd\x61\xf7\x07\x89\xab\x0e\x9b\x50\xfb\xff\xfc\x09\xd0\xe3\x96\x8b\x45\xcd\x8c\x86\x73\x54\x03\x1a\x46\x4f\x06\xe4\xb1\xf1\x28\xcd\x34\x20\x1d\xa0\x55\xda\x3d\x64\x35\x90\x7c\x8a\x56\xca\x2d\x15\x37\x21\x50\x6f\xa2\xc8\x81\x30\x8d\x1f\x9b\x04\xfa\x03\x49\x32\x91\x5f\x42\xa0\x80\xa1\xa0\xef\xe4\x06\x81\x8e\xf6\x62\x90\x29\x29\x65\x90\x0e\x0e\x94\x25\xd1\x33\x0c\xd2\x89\x8d\xa6\x3c\xcf\xd9\x95\xe2\x15\x4b\xa9\x3a\xfb\x4b\xcb\xa3\xaa\x39\x76\x54\x7a\x5a\x8c\xb9\xbd\x8b\xc6\x99\xef\x16\x24\x6d\xd7\xf5\xf7\x26\x6e\x0d\x6c\xd8\x8f\xb4\x3f\xbf\xba\x1d\x77\x37\x61\x55\xf4\xff\x8c\xc1\x80\x4d\xa9\xdc\x19\xf6\xf5\xb8\x5d\xdd\xd2\xcb\xad\xec\xbb\xae\x42\x2a\x06\xee\x03\x0e\xfe\x0a\x88\x0c\xe1\x0d\x4f\xbb\x64\x86\x20\xd4\xcf\x41\x97\x9c\x8e\x9a\xcf\xd0\xad\x1c\x48\x6f\x1a\x19\x0e\xe4\x5b\xa6\x02\x90\xcc\xfc\x4e\xe3\x74\xdd\x56\x52\x61\x8a\x17\xe0\x04\xb9\xbe\x8c\x08\x20\x54\x89\x94\xd9\x89\x1a\xe1\x63\x15\x8e\xb2\xd6\x0e\x5e\xdb\x77\x4f\xe1\x82\x09\x79\xcb\xb1\x7b\xd9\x82\xcf\xce\xa7\x63\x60\x34\x9a\xbf\x48\xb4\xfe\x6d\xfd\xec\x74\xbf\x68\xc9\x67\x8c\xdb\x1e\xd4\xdb\xde\x79\xab\x59\xf7\xe3\x83\xdf\xae\x12\xea\x06\xd8\x86\x44\xf0\x9e\x93\xb2\x75\xe5\x5a\x33\x9c\x70\x1c\x86\x0f\xeb\xe6\x65\xf7\xaa\xde\xea\x35\xdc\x46\x39\xe3\x79\x28\xa9\x39\x8c\x56\xbc\xf9\xbe\x37\xd7\xed\x64\xe3\x6d\x6a\xc9\x01\xae\xf2\x6f\xbb\xf1\x75\x65\x07\xda\xe4\xd9\x50\x3b\x08\xd6\x70\x5b\xae\x9a\xd5\xf3\x4e\xfb\x7b\x41\x82\x15\xdc\x95\x1f\x0b\x8c\xe6\xa1\x16\xd9\xab\x5c\x47\x57\x9f\x66\xdb\x86\x73\x75\xe6\xf9\xd3\xb9\x58\x7c\x00\xa4\x81\xfe\x6e\xb6\x7e\x07\x00\x00\xff\xff\x5b\xc8\x14\xd0\x4e\x0f\x00\x00")

func templateMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMethodTmpl,
		"template/method.tmpl",
	)
}

func templateMethodTmpl() (*asset, error) {
	bytes, err := templateMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/method.tmpl", size: 3918, mode: os.FileMode(420), modTime: time.Unix(1468655061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x57\xa8\xae\x56\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\x55\x28\x4a\x2d\x28\x4a\x2d\x4e\xcd\x2b\x29\x06\x0b\x87\x24\x26\xe5\xa4\xea\x05\x27\x67\xa4\xe6\x26\x02\xa5\xf5\x10\x62\x50\x0d\x5c\x25\x95\x05\xa9\x28\x26\x14\x97\x14\x95\x26\x97\x28\x54\x73\x55\x57\xeb\x2a\x14\x25\xe6\xa5\xa7\x2a\xe8\xb9\x65\xa6\xe6\xa4\x14\x83\x94\x73\x22\x2b\x05\x9b\x06\xd2\x0f\x64\x43\xdd\xe1\x9c\x9f\x53\x9a\x9b\x07\x37\x1d\x64\x46\x6a\x5e\x0a\x88\x59\xcb\x05\x08\x00\x00\xff\xff\x93\x7f\xab\xa4\xab\x00\x00\x00")

func templateStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateStructTmpl,
		"template/struct.tmpl",
	)
}

func templateStructTmpl() (*asset, error) {
	bytes, err := templateStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/struct.tmpl", size: 171, mode: os.FileMode(420), modTime: time.Unix(1468656862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapconfigTypemapToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x95\xcf\x8e\xd3\x30\x10\xc6\xef\x79\x0a\x2b\xc7\x15\xaa\x96\x3f\xda\x1b\x37\x84\xc4\x85\x0b\xdc\xca\xaa\x9a\xa4\x93\xac\x25\xc7\x2e\xce\xb8\x10\x10\xef\x8e\xed\x26\xbb\x89\x33\xa6\xea\x81\xec\x4a\x6d\xfa\xcd\x7c\x93\x5f\x67\xd2\xf1\xbe\x27\x2b\x75\xfb\x58\x1c\xab\x03\x0d\x27\xec\xc5\x7b\xb1\x2f\xeb\x27\xb0\x50\x13\xda\xf2\x95\x78\xf9\x20\xce\x60\x07\x9f\x1c\x44\xc2\x9f\x14\xde\x3b\xa3\x71\x28\x1f\x0b\x6d\x48\x3b\xa5\x0e\xad\x89\x65\x7c\x95\xf2\x52\xb9\x7c\x0e\x69\xa9\x0e\x67\x50\x0e\x7d\xec\x9b\xff\xf7\x11\x2f\x43\xa5\x70\xe1\xfa\xae\x76\x9f\xbd\xfe\x65\x72\x4f\x39\x6b\x7b\xb1\x27\xd9\xe1\x12\xbd\x10\xfe\xaf\x0c\xba\xf8\x21\xe9\x49\xc4\xab\x5f\x1e\x32\x42\x4f\xb2\x71\x34\x8f\xbc\x98\x7a\x82\xee\xc4\xa5\xa4\xe1\x65\xec\x08\x84\x65\xc1\x76\x21\xe4\xed\xbe\xfa\x17\xbe\x11\xf7\x7c\x17\xee\xe6\x36\xae\x03\xf7\xe1\xeb\x57\xc6\xa8\x64\x72\x41\x42\xd0\xfc\x44\x42\x90\xc7\x68\x40\xf5\xc8\xa3\x8c\x26\x0e\x62\x74\x15\xfb\xbe\x03\xa5\xa4\xa6\x04\x66\x92\x79\x1a\x1f\x78\xfd\x70\x53\x57\xa6\x67\xe3\x93\xa6\x87\x77\x19\xa6\x45\xce\xef\x3f\x81\xce\xdf\x08\x5b\xb4\x09\xdc\xa8\x66\xd9\xb6\x20\xab\x64\xbb\xee\xda\x45\xcc\x72\xc5\xfa\xff\x9d\x2c\x8e\xae\x47\x2b\x21\x7d\xc2\x66\x11\x9e\xd1\x6d\x36\x58\x9e\xef\x0a\xda\xdb\x37\x5b\xa0\x59\x5c\x81\x05\x89\xc7\x6a\x94\x81\x3c\xd7\xee\x0a\xd9\xc7\xe0\xbe\xca\x36\x66\x5d\xe8\xb4\xeb\x7c\x97\xea\x04\x70\x54\xe3\x42\x33\xce\x17\x12\x27\x8b\xb5\xec\xa5\xc9\xec\x93\xe6\xf9\xce\x1b\x71\x57\x03\x21\xa4\x3f\x97\xa0\x65\xf6\xdd\x40\x99\xb5\x9b\x3f\x7f\x46\xcf\xbf\x4e\x9d\xb0\x39\xec\x79\x35\xdf\x49\xe6\x59\xe2\x42\xff\xe0\x2c\x50\x68\xe7\xed\x67\xc1\xcc\x9a\x3d\x0f\x8e\xd8\x80\x53\xe9\x3e\xb9\xcb\xae\x12\xb4\x0d\xd4\x18\x5a\xcb\xe1\xf8\x6b\x1e\x68\xe9\xe4\x68\xa2\xf5\x6f\x00\x00\x00\xff\xff\x86\xa2\x95\x6d\x5b\x08\x00\x00")

func mapconfigTypemapTomlBytes() ([]byte, error) {
	return bindataRead(
		_mapconfigTypemapToml,
		"mapconfig/typemap.toml",
	)
}

func mapconfigTypemapToml() (*asset, error) {
	bytes, err := mapconfigTypemapTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mapconfig/typemap.toml", size: 2139, mode: os.FileMode(420), modTime: time.Unix(1468475301, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/method.tmpl": templateMethodTmpl,
	"template/struct.tmpl": templateStructTmpl,
	"mapconfig/typemap.toml": mapconfigTypemapToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mapconfig": &bintree{nil, map[string]*bintree{
		"typemap.toml": &bintree{mapconfigTypemapToml, map[string]*bintree{}},
	}},
	"template": &bintree{nil, map[string]*bintree{
		"method.tmpl": &bintree{templateMethodTmpl, map[string]*bintree{}},
		"struct.tmpl": &bintree{templateStructTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

